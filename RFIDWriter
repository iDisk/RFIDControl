package com.example.nfcqrprototype

import android.app.PendingIntent
import android.content.Intent
import android.nfc.NfcAdapter
import android.nfc.Tag
import android.nfc.tech.Ndef
import android.nfc.NdefMessage
import android.nfc.NdefRecord
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import java.nio.charset.Charset

// App para escribir datos en NFC
class WriteNFCActivity : ComponentActivity() {
    private var nfcAdapter: NfcAdapter? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        nfcAdapter = NfcAdapter.getDefaultAdapter(this)

        setContent {
            NFCWriterApp()
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        val tag = intent.getParcelableExtra<Tag>(NfcAdapter.EXTRA_TAG)
        tag?.let {
            writeToNfc(it, "Test NFC Data")
        }
    }

    private fun writeToNfc(tag: Tag, data: String) {
        val ndef = Ndef.get(tag)
        if (ndef != null) {
            try {
                ndef.connect()
                val mimeRecord = NdefRecord.createMime("text/plain", data.toByteArray(Charset.forName("UTF-8")))
                val ndefMessage = NdefMessage(mimeRecord)
                ndef.writeNdefMessage(ndefMessage)
                ndef.close()
            } catch (e: Exception) {
                Log.e("NFC", "Write error", e)
            }
        }
    }
}

@Composable
fun NFCWriterApp() {
    var text by remember { mutableStateOf("Acerca tu NFC para escribir datos") }

    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center
    ) {
        Text(text = text, style = MaterialTheme.typography.bodyLarge)
        Spacer(modifier = Modifier.height(20.dp))
        Button(onClick = { text = "Esperando etiqueta NFC..." }) {
            Text("Escribir en NFC")
        }
    }
}

// App para leer datos desde NFC
class ReadNFCActivity : ComponentActivity() {
    private var nfcAdapter: NfcAdapter? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        nfcAdapter = NfcAdapter.getDefaultAdapter(this)

        setContent {
            NFCReaderApp("Acerca el NFC para leer datos")
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        val tag = intent.getParcelableExtra<Tag>(NfcAdapter.EXTRA_TAG)
        tag?.let {
            val data = readFromNfc(it)
            setContent {
                NFCReaderApp(data ?: "No se pudo leer el NFC")
            }
        }
    }

    private fun readFromNfc(tag: Tag): String? {
        val ndef = Ndef.get(tag)
        return if (ndef != null) {
            try {
                ndef.connect()
                val ndefMessage = ndef.ndefMessage
                ndefMessage?.records?.firstOrNull()?.payload?.toString(Charset.forName("UTF-8"))
            } catch (e: Exception) {
                Log.e("NFC", "Read error", e)
                null
            }
        } else {
            null
        }
    }
}

@Composable
fun NFCReaderApp(text: String) {
    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center
    ) {
        Text(text = text, style = MaterialTheme.typography.bodyLarge)
    }
}

// Generador y lector de c√≥digos QR
import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.ui.graphics.asImageBitmap
import com.google.zxing.BarcodeFormat
import com.google.zxing.MultiFormatWriter
import com.google.zxing.common.BitMatrix

@Composable
fun QRCodeGenerator() {
    var qrText by remember { mutableStateOf("Datos de prueba") }
    val qrBitmap = generateQRCode(qrText)

    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center
    ) {
        TextField(value = qrText, onValueChange = { qrText = it }, label = { Text("Texto QR") })
        Spacer(modifier = Modifier.height(20.dp))
        qrBitmap?.let { Image(bitmap = it.asImageBitmap(), contentDescription = "QR Code") }
    }
}

fun generateQRCode(text: String): Bitmap? {
    return try {
        val bitMatrix: BitMatrix = MultiFormatWriter().encode(text, BarcodeFormat.QR_CODE, 512, 512)
        val width = bitMatrix.width
        val height = bitMatrix.height
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565)
        for (x in 0 until width) {
            for (y in 0 until height) {
                bitmap.setPixel(x, y, if (bitMatrix[x, y]) android.graphics.Color.BLACK else android.graphics.Color.WHITE)
            }
        }
        bitmap
    } catch (e: Exception) {
        Log.e("QR", "QR Generation error", e)
        null
    }
}
